name: Build and Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'config.yaml.sample'
  workflow_dispatch:

env:
  GO_VERSION: '1.21'

jobs:
  build:
    name: Build binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: linux
            goarch: arm64
            suffix: linux-arm64
          - goos: darwin
            goarch: amd64
            suffix: darwin-amd64
          - goos: darwin
            goarch: arm64
            suffix: darwin-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          mkdir -p dist
          go build -ldflags="-s -w" -o dist/config-pilot-${{ matrix.suffix }}${{ matrix.goos == 'windows' && '.exe' || '' }} ./cmd/monitor

      - name: Upload binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: config-pilot-${{ matrix.suffix }}
          path: dist/config-pilot-${{ matrix.suffix }}${{ matrix.goos == 'windows' && '.exe' || '' }}

  build-deb:
    name: Build .deb packages
    runs-on: ubuntu-latest
    needs: [build, calculate-version]
    strategy:
      matrix:
        arch: [amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev debhelper

      - name: Build binary for deb package
        env:
          GOOS: linux
          GOARCH: ${{ matrix.arch }}
        run: |
          mkdir -p build/usr/bin
          go build -ldflags="-s -w" -o build/usr/bin/config-pilot ./cmd/monitor

      - name: Create package structure
        run: |
          mkdir -p build/etc/config-pilot
          mkdir -p build/lib/systemd/system
          mkdir -p build/DEBIAN

      - name: Copy config files
        run: |
          cp config.yaml.sample build/etc/config-pilot/config.yaml

      - name: Create systemd service
        run: |
          cat > build/lib/systemd/system/config-pilot.service << 'EOF'
          [Unit]
          Description=Config Pilot Service
          After=network.target

          [Service]
          Type=simple
          User=root
          Group=root
          ExecStart=/usr/bin/config-pilot
          Restart=always
          RestartSec=10
          Environment="CONFIG_PATH=/etc/config-pilot/config.yaml"

          [Install]
          WantedBy=multi-user.target
          EOF

      - name: Create postinst script
        run: |
          cat > build/DEBIAN/postinst << 'EOF'
          #!/bin/bash
          set -e

          # Create log directory
          mkdir -p /var/log/config-pilot

          # Enable service (but don't start automatically)
          systemctl daemon-reload
          systemctl enable config-pilot.service

          # Display configuration message
          echo ""
          echo "=================================================="
          echo "Config Pilot installed successfully!"
          echo ""
          echo "IMPORTANT: Please configure the service before starting it."
          echo ""
          echo "Configuration file: /etc/config-pilot/config.yaml"
          echo "Sample configuration: /etc/config-pilot/config.yaml.sample"
          echo ""
          echo "After configuration, start the service with:"
          echo "  sudo systemctl start config-pilot.service"
          echo ""
          echo "Check service status with:"
          echo "  sudo systemctl status config-pilot.service"
          echo "=================================================="
          echo ""

          exit 0
          EOF

      - name: Create prerm script
        run: |
          cat > build/DEBIAN/prerm << 'EOF'
          #!/bin/bash
          set -e

          # Stop service
          systemctl stop config-pilot.service || true
          systemctl disable config-pilot.service || true

          exit 0
          EOF

      - name: Create control file
        run: |
          cat > build/DEBIAN/control << EOF
          Package: config-pilot
          Version: ${{ needs.calculate-version.outputs.next_version }}
          Section: utils
          Priority: optional
          Architecture: ${{ matrix.arch }}
          Depends: systemd
          Maintainer: Config Pilot Team
          Description: Config Pilot - Configuration management and monitoring service. Config Pilot is a service that monitors configuration changes and provides automated deployment capabilities.
          EOF

      - name: Set permissions
        run: |
          chmod +x build/DEBIAN/postinst
          chmod +x build/DEBIAN/prerm
          chmod 755 build/usr/bin/config-pilot

      - name: Build .deb package
        run: |
          ls -la
          dpkg-deb --build build config-pilot-${{ matrix.arch }}.deb
          ls -la

      - name: Upload .deb artifact
        uses: actions/upload-artifact@v4
        with:
          name: config-pilot-${{ matrix.arch }}
          path: config-pilot-${{ matrix.arch }}.deb

  calculate-version:
    name: Calculate Next Version
    runs-on: ubuntu-latest
    outputs:
      next_version: ${{ steps.version.outputs.next_version }}
      next_version_tag: ${{ steps.version.outputs.next_version_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Calculate next version
        id: version
        run: |
          # Get the latest tag
          latest_tag=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+$' | head -n 1)
          
          if [ -z "$latest_tag" ]; then
            # No tags exist, start with v1.0
            next_major=1
            next_minor=0
          else
            # Extract major and minor version
            version=${latest_tag#v}
            major=$(echo $version | cut -d. -f1)
            minor=$(echo $version | cut -d. -f2)
            
            # Increment minor version, if minor reaches 10, increment major and reset minor
            if [ "$minor" -eq 9 ]; then
              next_major=$((major + 1))
              next_minor=0
            else
              next_major=$major
              next_minor=$((minor + 1))
            fi
          fi
          
          next_version="${next_major}.${next_minor}"
          next_version_tag="v${next_version}"
          
          echo "next_version=$next_version" >> $GITHUB_OUTPUT
          echo "next_version_tag=$next_version_tag" >> $GITHUB_OUTPUT
          
          echo "Next version will be: $next_version_tag"

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, build-deb, calculate-version]
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create git tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a ${{ needs.calculate-version.outputs.next_version_tag }} -m "Release ${{ needs.calculate-version.outputs.next_version_tag }}"
          git push origin ${{ needs.calculate-version.outputs.next_version_tag }}

      - name: Update .deb package version
        run: |
          # Update version in control files
          find . -name "control" -exec sed -i "s/Version: .*/Version: ${{ needs.calculate-version.outputs.next_version }}/g" {} \;

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.calculate-version.outputs.next_version_tag }}
          files: |
            artifacts/config-pilot-linux-amd64/config-pilot-linux-amd64
            artifacts/config-pilot-linux-arm64/config-pilot-linux-arm64
            artifacts/config-pilot-darwin-amd64/config-pilot-darwin-amd64
            artifacts/config-pilot-darwin-arm64/config-pilot-darwin-arm64
            artifacts/config-pilot-amd64/config-pilot-*.deb
            artifacts/config-pilot-arm64/config-pilot-*.deb
          draft: false
          prerelease: false
          generate_release_notes: true
          name: "Release ${{ needs.calculate-version.outputs.next_version_tag }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
